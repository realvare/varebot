import fetch from 'node-fetch';
import PhoneNumber from 'awesome-phonenumber';

const handler = async (m, { conn, participants, args }) => {
  const messaggio = args.join` `;
  const info = messaggio ? `¬ª„Äé üì¢ „Äè \`MESSAGGIO:\` *${messaggio}*` : '';
  let messaggi = `*‚îÄ◊Ñ‚îÄ◊Ö‚îÄ◊Ñ„Äé .ñ•î ›Å Àñüåç‚îÄ‚îÄ .‚ú¶ „Äè‚îÄ◊Ñ‚îÄ◊Ö‚îÄ◊Ñ*\n\n${info ? info + '\n' : ''}\n‚ï≠  ‚îÑ ùÖÑ  €™Íí∞ \`varebot\` Íí±  €ü   ùÖÑ ‚îÑ\n`;
  
  if (!global.emojiCache) global.emojiCache = new Map();
  if (!global.cacheStats) global.cacheStats = { hits: 0, misses: 0, errors: 0 };
  if (!global.cacheTimestamps) global.cacheTimestamps = new Map();
  
  const CACHE_TTL = 5 * 60 * 1000;
  const now = Date.now();
  for (const [key, timestamp] of global.cacheTimestamps.entries()) {
    if (now - timestamp > CACHE_TTL) {
      global.emojiCache.delete(key);
      global.cacheTimestamps.delete(key);
    }
  }
  
  const countryEmojiFallback = {
    '1': 'üá∫üá∏', '39': 'üáÆüáπ', '33': 'üá´üá∑', '49': 'üá©üá™', '44': 'üá¨üáß', '34': 'üá™üá∏', '55': 'üáßüá∑',
    '52': 'üá≤üáΩ', '54': 'üá¶üá∑', '91': 'üáÆüá≥', '86': 'üá®üá≥', '81': 'üáØüáµ', '82': 'üá∞üá∑', '7': 'üá∑üá∫',
    '90': 'üáπüá∑', '20': 'üá™üá¨', '27': 'üáøüá¶', '61': 'üá¶üá∫', '62': 'üáÆüá©', '60': 'üá≤üáæ', '65': 'üá∏üá¨',
    '66': 'üáπüá≠', '84': 'üáªüá≥', '63': 'üáµüá≠', '92': 'üáµüá∞', '93': 'üá¶üá´', '98': 'üáÆüá∑', '964': 'üáÆüá∂',
    '966': 'üá∏üá¶', '971': 'üá¶üá™', '972': 'üáÆüá±', '30': 'üá¨üá∑', '31': 'üá≥üá±', '32': 'üáßüá™', '41': 'üá®üá≠',
    '43': 'üá¶üáπ', '45': 'üá©üá∞', '46': 'üá∏üá™', '47': 'üá≥üá¥', '48': 'üáµüá±', '351': 'üáµüáπ', '358': 'üá´üáÆ',
    '380': 'üá∫üá¶', '420': 'üá®üáø', '421': 'üá∏üá∞', '385': 'üá≠üá∑', '386': 'üá∏üáÆ', '387': 'üáßüá¶',
    '381': 'üá∑üá∏', '382': 'üá≤üá™', '383': 'üáΩüá∞', '389': 'üá≤üá∞', '355': 'üá¶üá±', '359': 'üáßüá¨',
    '40': 'üá∑üá¥', '36': 'üá≠üá∫', '216': 'üáπüá≥'
  };

  const getEmojiForNumber = async (phoneNumber, id) => {
    if (global.emojiCache.has(id) && global.cacheTimestamps.has(id)) {
      const cacheTime = global.cacheTimestamps.get(id);
      if (now - cacheTime < CACHE_TTL) {
        global.cacheStats.hits++;
        return global.emojiCache.get(id);
      } else {
        global.emojiCache.delete(id);
        global.cacheTimestamps.delete(id);
      }
    }

    if (phoneNumber.length < 6 || phoneNumber.length > 15 || isNaN(phoneNumber)) {
      global.emojiCache.set(id, 'üè≥Ô∏è');
      global.cacheTimestamps.set(id, now);
      console.warn(`Numero non valido saltato per ${id}: ${phoneNumber}`);
      return 'üè≥Ô∏è';
    }

    try {
      const pn = PhoneNumber('+' + phoneNumber);
      if (!pn.isValid()) {
        global.emojiCache.set(id, 'üè≥Ô∏è');
        global.cacheTimestamps.set(id, now);
        console.warn(`Numero non valido per ${id}: ${phoneNumber}`);
        return 'üè≥Ô∏è';
      }
      
      const numero = pn.getNumber('international');
      const countryCode = pn.getCountryCode();
      if (countryEmojiFallback[countryCode]) {
        const emoji = countryEmojiFallback[countryCode];
        global.emojiCache.set(id, emoji);
        global.cacheTimestamps.set(id, now);
        global.cacheStats.hits++;
        return emoji;
      }
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000);
      
      const response = await fetch(
        `https://delirius-apiofc.vercel.app/tools/country?text=${numero}`,
        { 
          signal: controller.signal,
          headers: { 
            'User-Agent': 'VareBot/2.5',
            'Accept': 'application/json',
            'Cache-Control': 'no-cache'
          }
        }
      );
      clearTimeout(timeoutId);
      
      if (!response.ok) throw new Error(`HTTP ${response.status}`);
      
      const json = await response.json();
      const emoji = json.result?.emoji || 'üè≥Ô∏è';
      global.emojiCache.set(id, emoji);
      global.cacheTimestamps.set(id, now);
      global.cacheStats.misses++;
      
      return emoji;
    } catch (error) {
      console.warn(`Errore API per ${id}:`, error.message);
      global.cacheStats.errors++;
      global.emojiCache.set(id, 'üè≥Ô∏è');
      global.cacheTimestamps.set(id, now);
      return 'üè≥Ô∏è';
    }
  };

  const BATCH_SIZE = 10;
  const risultati = [];
  
  for (let i = 0; i < participants.length; i += BATCH_SIZE) {
    const batch = participants.slice(i, i + BATCH_SIZE);
    
    const batchPromises = batch.map(async (mem) => {
      const decodedJid = conn.decodeJid(mem.id);
      const [user, server] = decodedJid.split('@');
      let id = user.split(':')[0];
      const phoneNumber = user.split(':')[0];
      let emoji;
      const isLID = server === 'lid';
      if (isLID) {
        emoji = 'üè≥Ô∏è';
      } else {
        emoji = await getEmojiForNumber(phoneNumber, id);
      }
      return `${emoji} @${id}`;
    });

    const batchResults = await Promise.all(batchPromises);
    risultati.push(...batchResults);
    if (i + BATCH_SIZE < participants.length) {
      await new Promise(resolve => setTimeout(resolve, 50));
    }
  }

  const getGroupData = async () => {
    try {
      const [groupImg, groupMetadata] = await Promise.all([
        conn.profilePictureUrl(m.chat, 'image').catch(() => 'https://i.ibb.co/hJW7WwxV/varebot.jpg'),
        conn.groupMetadata(m.chat)
      ]);
      return { 
        img: groupImg,
        name: groupMetadata.subject || '',
        memberCount: participants.length
      };
    } catch {
      return { 
        img: 'https://i.ibb.co/hJW7WwxV/varebot.jpg',
        name: '',
        memberCount: participants.length
      };
    }
  };

  const groupData = await getGroupData();

  messaggi += risultati.join('\n');
  messaggi += `\n‚ï∞‚∏º ‚îÑ ‚îÑÍí∞  ◊Ö‡≠≠ *tagall* ‡≠ß ◊Ö Íí±‚îÄ ‚îÑ ‚∏º`;
  console.log(`Tagall Cache Stats - Hits: ${global.cacheStats.hits}, Misses: ${global.cacheStats.misses}, Errori: ${global.cacheStats.errors}, Spazio: ${global.emojiCache.size}`);
  
  await conn.sendMessage(m.chat, { 
    text: messaggi,
    mentions: participants.map(a => conn.decodeJid(a.id)),
    contextInfo: {
      externalAdReply: {
        title: groupData.name,
        body: `‚õß¬∞‚ãÜ‡º∫ ${groupData.memberCount} membri ‡ºª‚ãÜ¬∞‚õß`,
        thumbnailUrl: groupData.img,
        sourceUrl: '',
        mediaType: 1,
        renderLargerThumbnail: true
      }
    }
  });
  if (global.emojiCache.size > 500) {
    const entries = Array.from(global.cacheTimestamps.entries())
      .sort(([,a], [,b]) => a - b)
      .slice(0, 100);
      
    entries.forEach(([key]) => {
      global.emojiCache.delete(key);
      global.cacheTimestamps.delete(key);
    });
  }
};

handler.help = ['tagall'];
handler.tags = ['gruppo'];
handler.command = /^(tagall|invoca|menzionatutti)$/i;
handler.admin = true;
handler.group = true;

export default handler;