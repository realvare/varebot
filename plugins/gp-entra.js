let linkRegex = /chat.whatsapp.com\/([0-9A-Za-z]{20,24})/i;

let handler = async (m, { conn, text, usedPrefix, command }) => {
    // Verifica che sia stato fornito un link
    if (!text) {
        return m.reply(`ü§ñ *Inserisci il link del gruppo WhatsApp*\n\n` +
                      `üìã *Esempio:* ${usedPrefix + command} https://chat.whatsapp.com/xxxxx\n\n` +
                      `‚ö° *Requisiti:*\n` +
                      `‚Ä¢ Gruppo con almeno 40 membri\n` +
                      `‚Ä¢ Link di invito valido\n` +
                      `‚Ä¢ Inviti non limitati agli admin`);
    }
    
    // Estrai il codice di invito dal link
    let [_, code] = text.match(linkRegex) || [];
    if (!code) {
        return m.reply('„Äé ‚ùå „Äè **Link non valido**\n\n' +
                      '‚úÖ Formato corretto: `https://chat.whatsapp.com/xxxxxxxxx`');
    }
    
    // Messaggio di elaborazione
    let processingMsg = await m.reply('üîÑ *Analizzando il gruppo...*\n‚è≥ Controllo requisiti in corso...');
    
    try {
        // Ottieni informazioni sul gruppo senza entrare
        let groupInfo;
        try {
            groupInfo = await conn.groupGetInviteInfo(code);
        } catch (error) {
            return m.reply('„Äé ‚ùå „Äè **Errore nell\'ottenere informazioni sul gruppo**\n\n' +
                          'üí° *Possibili cause:*\n' +
                          '‚Ä¢ Link scaduto o revocato\n' +
                          '‚Ä¢ Link non valido\n' +
                          '‚Ä¢ Gruppo eliminato');
        }
        
        // Controlla il numero di membri (deve essere almeno 40)
        const MIN_MEMBERS = 40;
        if (groupInfo.size < MIN_MEMBERS) {
            return m.reply(`„Äé ‚ùå „Äè **Gruppo troppo piccolo**\n\n` +
                          `üìä *Membri attuali:* ${groupInfo.size}\n` +
                          `üìã *Minimo richiesto:* ${MIN_MEMBERS} membri\n\n` +
                          `üí° Torna quando il gruppo avr√† pi√π membri!`);
        }
        
        // Controlla se gli inviti sono limitati agli amministratori
        if (groupInfo.restrict) {
            return m.reply('„Äé ‚ùå „Äè **Accesso limitato**\n\n' +
                          'üîí Solo gli amministratori possono invitare membri in questo gruppo.\n' +
                          'üí° Chiedi a un admin di aggiungermi manualmente.');
        }
        
        // Controlla se il bot √® gi√† nel gruppo
        try {
            let groupData = await conn.groupMetadata(groupInfo.id).catch(() => null);
            if (groupData) {
                return m.reply('„Äé ‚ö†Ô∏è „Äè **Sono gi√† in questo gruppo!**\n\n' +
                              `üìù Nome: ${groupData.subject}\n` +
                              `üë• Membri: ${groupData.participants.length}`);
            }
        } catch (e) {
        }
        await conn.sendMessage(m.chat, {
            text: '‚úÖ *Requisiti soddisfatti!*\nüöÄ Ingresso nel gruppo in corso...',
            edit: processingMsg.key
        });
        let joinResult = await conn.groupAcceptInvite(code);
        console.log('Bot entrato nel gruppo:', joinResult);
        let chats = global.db.data.chats[joinResult];
        if (!chats) {
            chats = global.db.data.chats[joinResult] = {};
        }
        const EXPIRY_DAYS = 3;
        let expiredTime = EXPIRY_DAYS * 24 * 60 * 60 * 1000;
        let expiryDate = new Date(Date.now() + expiredTime);
        
        chats.expired = Date.now() + expiredTime;
        chats.joinedBy = m.sender;
        chats.joinedAt = Date.now();
        let successMessage = `‚úÖ **Ingresso completato con successo!**\n\n` +
                            `üè∑Ô∏è *Gruppo:* ${groupInfo.subject || 'Nome non disponibile'}\n` +
                            `üë• *Membri:* ${groupInfo.size}\n` +
                            `üìÖ *Data ingresso:* ${new Date().toLocaleString('it-IT')}\n` +
                            `‚è∞ *Scadenza:* ${expiryDate.toLocaleString('it-IT')}\n` +
                            `üïê *Durata permanenza:* ${EXPIRY_DAYS} giorni\n\n` +
                            `üí° *Per estendere il tempo, contatta:* wa.me/393476686131`;
        
        await m.reply(successMessage);
        try {
            await new Promise(resolve => setTimeout(resolve, 2000));
            await conn.sendMessage(joinResult, {
                text: `üëã **Ciao a tutti!**\n\n` +
                     `ü§ñ Sono un bot e rimarr√≤ qui per **${EXPIRY_DAYS} giorni**\n` +
                     `üìÖ Scadenza: ${expiryDate.toLocaleString('it-IT')}\n\n` +
                     `üí° Per assistenza o per estendere la permanenza:\n` +
                     `üì± Contatta: wa.me/393476686131\n\n` +
                     `üöÄ Buona giornata a tutti!`
            });
        } catch (welcomeError) {
            console.log('Errore invio messaggio di benvenuto:', welcomeError);
        }
        setTimeout(async () => {
            try {
                console.log(`Uscita automatica programmata per il gruppo: ${joinResult}`);
                await conn.sendMessage(joinResult, {
                    text: `üëã **Tempo scaduto!**\n\n` +
                         `‚è∞ La mia permanenza di ${EXPIRY_DAYS} giorni √® terminata.\n` +
                         `üö™ Sto per lasciare il gruppo automaticamente.\n\n` +
                         `üí° **Per riavermi nel gruppo:**\n` +
                         `üì± Contatta il creatore: wa.me/393476686131\n\n` +
                         `üëã Arrivederci a tutti!`
                });
                await new Promise(resolve => setTimeout(resolve, 5000));
                await conn.groupLeave(joinResult);
                console.log(`Bot uscito automaticamente dal gruppo: ${joinResult}`);
                if (global.db.data.chats[joinResult]) {
                    delete global.db.data.chats[joinResult];
                    console.log(`Dati gruppo rimossi dal database: ${joinResult}`);
                }
                
            } catch (exitError) {
                console.error('Errore durante l\'uscita automatica:', exitError);
                try {
                    if (global.db.data.chats[joinResult]) {
                        delete global.db.data.chats[joinResult];
                    }
                } catch (dbError) {
                    console.error('Errore rimozione dati database:', dbError);
                }
            }
        }, expiredTime);
        console.log(`Bot entrato nel gruppo ${joinResult}, uscita programmata per:`, expiryDate);
        
    } catch (error) {
        console.error('Errore nel comando entra:', error);
        
        let errorMessage = '„Äé ‚ùå „Äè **Errore durante l\'ingresso nel gruppo**\n\n';
        if (error.message.includes('forbidden')) {
            errorMessage += 'üîí Accesso negato. Il gruppo potrebbe aver limitazioni.';
        } else if (error.message.includes('not-found')) {
            errorMessage += 'üîç Gruppo non trovato. Il link potrebbe essere scaduto.';
        } else if (error.message.includes('conflict')) {
            errorMessage += '‚ö†Ô∏è Sono gi√† nel gruppo o c\'√® un conflitto.';
        } else {
            errorMessage += 'üí° Riprova tra qualche minuto o verifica il link.';
        }
        
        errorMessage += '\n\nüìß Se il problema persiste, contatta: wa.me/393476686131';
        
        return m.reply(errorMessage);
    }
};
handler.help = ['entra *<link>*'];
handler.tags = ['gruppo'];
handler.command = ['entra', 'joingroup'];
handler.private = true;

export default handler;